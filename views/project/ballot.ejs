<!doctype html>
<html>
    <head>

        <title>Ballot</title>

        <!-- SEO and mobile format declarations -->
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta name="description" content="Yash Agrawal | Project/Ballot">
        <meta name="keywords" content="">
        <meta charset="UTF-8">
        <meta http-equiv="Content-type" content="text/html; charset=UTF-8">

        <!-- Favicon -->
        <link rel="shortcut icon" type="image/x-icon" href="../img/webicon.png" />

        <!-- Stylesheets -->
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
        <link href="../css/main.css" rel="stylesheet">
        <link href="../css/project.css" rel="stylesheet">

        <!-- Global site tag (gtag.js) - Google Analytics -->
        <script async src="https://www.googletagmanager.com/gtag/js?id=UA-65874311-9"></script>
        <script>
          window.dataLayer = window.dataLayer || [];
          function gtag(){dataLayer.push(arguments);}
          gtag('js', new Date());

          gtag('config', 'UA-65874311-9');
        </script>


    </head>
    <body>
        <div class="no-overflow">
            <div class="content">
                <div class="header">
                    <a class="anchor" href="/"><p><strong>YASH</strong> AGRAWAL</a>
                        <span class="links"><a class="anchor" href="/about">About</a></span>
                        <span class="links"><a class="anchor" href="/work"> Work</a></span>
                    </p>
                </div>
                <p class="project-title">Ballot</p>
                <p class="project-subtitle">Polling Webapp written in React/Express/MySQL</p>
            </div>
            <img class="background img-responsive" src="../img/project/ballot/background.png">
            <div class="content">
                <p class="section-title">Introduction</p>
                <p class="article">The main idea behind this project was to create a portal that allowed users to create polls and share them on their social networks in order to gather a crowdsourced opinion.
                  Apart from that, the other goal of the project was to focus on the social aspect of the project where people can vote on polls on a feed and also be able to see data on their polls.
                  A few other features were also added that enhanced the experience.
                </br></br>
                  The main goal was to make sure that a user can vote without having to login in order to encourage engagement and also make sure that each user gets only one vote.
                  A wide range of metadata is collected just from the platform where the request originated. For eg. the IP address provides further information on the user’s location.
                  In addition to that, device data and browser data and timestamp at when each event was recorded. There's a stat platform which includes all the stats like number of polls created,
                  number of votes, number of events, number of distinct IPs, Browser data, device data, endpoints accessed, then data on how the poll attributes were entered, timeline of event creation
                  and poll creation, division of tags and finally map of where the events occurred.
                </br></br>
                  Another feature was to decide tags based on a custom trained NLP model on DialogFlow.
                </p>
                <div class="divider"></div>
                <p class="section-title">Usefulness</p>
                <p class="artile">
                  The very simple purpose of the app is for a user to be able to get a crowdsourced opinion on a question. The news feed function is both a source of information and fun.
                  There are multiple narrow scoped uses for our project. For eg, crowdsourcing is a very important part of Human-Computer Interaction and there is extensive scope in the
                  research for how people respond/provide feedback depending on different stimuli offered. We also added a feature where the creator of the poll can set poll behavior.
                  For example - show the status of the vote before the voter decides on a vote and see how popular vote sways the result as compared to a blind poll. Another important area
                  of use could be corporations asking for feedback from their users to help them decide areas to focus on based on demand.
                  </br></br>
                  There are some websites which have some overlap to what we plan to achieve. Doodle is the first result on a quick Google search on our idea and they provide a polling
                  service to coordinate meetings which are very different from our original idea. The other websites that overlap are overly complicated and their designs seem like they haven't
                  been updated since 2006 (when the use of Marquee wasn't ironic). We personally used the website to settle debates about whether Pineapple goes on Pizza and what the best operating system was.
                </p>
                <div class="divider"></div>
                <p class="section-title">Data</p>
                <p class="article">
                  Since the core of the project is surrounded by data, the application aims at collecting as much data as possible whenever users vote or create polls. At a high level, our application consists of the following data:
                  </br>
                  <ul>
                    <li>Poll data such as the question, options, poll creation time, IP address of the creator, the expiration time of the poll and a unique poll_id per poll.</li>
                    <li>Voters IP address, timestamp, and the option selected.</li>
                    <li>Users name, unique user_id, email id, and the profile picture from facebook.</li>
                    <li>Data regarding application usage. For example, endpoints accessed, browser used, operating system, operating system version etc. Tags assigned per poll depending on the question using DialogFlow.</li>
                  </ul>
                </p>
                <div class="divider"></div>
                <p class="section-title">Data flow</p>
                <p class="article">
                  The following steps show the flow of data on our website : </br></br>
                  After the /create endpoint is accessed, the user is asked to log in to be able to create a poll. On clicking the login button oAuth is performed by
                  Facebook and our API endpoint checks if the user already exists in the database. If they don’t the user details like name, email and a link to the
                  profile picture is inserted into the database and the log_count is set to one. If they already exist in the database, the log count is updated by one. </br></br>

                  Once the user is logged in, they are granted access to the create a poll screen. There are two steps to the form. First, the important details like
                  ‘Question’ and the ‘Options’ are asked. A minimum of two options are required and a maximum of four are allowed. The second part has attribute
                  details like feed privacy, analytics privacy and how long the poll needs to be active. </br></br>

                  After the create button is clicked a post API call is made to the backend where we generate a random unique six-character id to represent the
                  poll. The IP address is obtained from express and the creator id is added from Facebook id. The poll creation timestamp comes from the current
                  time accessed by Date.now() in JavaScript. After the details are inserted in the database, a poll link is generated and shown to the user in order
                  to be able to share it on their social networks. </br></br>
                  On the link, the poll can be accessed. Each time the link is accessed, the polls table is queried for the poll_id and all the details are rendered on
                  the page.

                  <img class="screenshot img-responsive" src="../img/project/ballot/create.gif" width="900px">

                  When the poll is inserted the question is processed through a custom trained NLP model on DialogFlow and based on that a tag is decided. In
                  this case ‘Movies’. It is inserted in the ‘Tags’ table along with the confidence on the tag as decided by the NLP model.
                  Before voting, the activity table is queried to check if the user’s IP has already voted on this current poll. More details about checking individual
                  unique vote are mentioned in the Advanced Functions section. After making sure that the user hasn’t voted on the poll, the render screen
                  appears and waiting for an option to be clicked. </br></br>
                  When an option is selected, the user's details like the IP address, the timestamp, poll_id, and the selected option are recorded in the activity table
                  and then the table is queried to find all activity on that poll so far to display a pie chart. </br></br>

                  Other features include the feed, the search, and the platform data which is generated using the data obtained from the browser, IP address, device and timestamps of when the events occur.

                  <img class="screenshot img-responsive" src="../img/project/ballot/feed.gif" width="900px">
                </p>

                <div class="divider"></div>
                <p class="section-title">Voting</p>
                <p class="article">
                  One of our main goals for this project was to allow voting without logging in. If login is mandated to vote it becomes easier to account for
                  uniqueness but since we wanted to allow voting without logging in, we needed to account for a lot of things to ensure uniqueness.
                </br></br> There are a few layers to each vote. Consider a scenario when a user first votes on a poll. After the vote is added, we use the browser’s
                  persistent storage to log the poll_id and their selection. Next, we log in the IP address of the user and the poll_id in our activity table.
                  Now there are a few possible ways for a user to be able to vote on the same poll again just based on these checks. If a user switches their
                  network for example from their work to home, their IP address changes and so they would technically be allowed to vote again. Also, if a user
                  uses a VPN to port their IP address to some other location they could technically be able to vote again. </br></br>

                  To account for these we used the following measures : </br>
                  <ul>
                    <li>The persistent browser storage is accessed to check if the poll_id for the user in play has already been voted on. If yes, then even
                    though the network has been switched, the poll shows that it has already been voted on.</li>
                    <li>To crack down on VPN we followed what Netflix does. We used a service called ‘IPHub’ which keeps a running record of popular VPNs.
                    Before a user can access a poll we run the IP address through IPHub’s API and find if the user is using a VPN. If they are, then we show
                    a message saying VPN is being used and to vote on a poll they would need to switch it off.</li>
                  </ul>
                </p>
                  <img class="screenshot img-responsive" src="../img/project/ballot/vpn.gif" width="900px">
                <p class="article">
                  Another challenge we have is to account for incognito mode. Incognito mode prevents access to the same local storage as for the nonincognito
                  mode and so all the checks for the network switch will be lost. In order to prevent multiple votes on the same poll from a user,
                  we restrict voting on incognito mode. For this, we needed to be able to detect if a browser is being used in incognito mode. Another
                  challenge here was that each browser is built differently so checking for incognito mode needed to be done in different ways based on
                  what the browser was. For example, in Google Chrome on the desktop window.requestFileSystem returns false. After account for
                  that, if the poll or feed is accessed in incognito mode, our website will detect that the user is browsing in incognito mode and display a
                  message to switch back to normal mode in order to vote.

                  <img class="screenshot img-responsive" src="../img/project/ballot/incognito.gif" width="900px">

                  Finally as an additional check, for the users that did log in, we kept a running count of all the IP addresses they have logged in with. This
                  allowed us to check if a user is voting on another poll by switching browsers if they were on another one of their commonly used IP
                  addresses. </br></br>

                  Also, we could make the feed personalized to a logged in user by showing them the polls that they haven’t voted on yet by joining the acti
                  vity table and IPs table. Even for users that haven’t logged in, the feed can be tailored to their IP address based on if a vote has been
                  logged in the activity table for that particular IP would be shown last.
                </p>
                <p class="article">
                  We also created an event logger from scratch which accessed data about the browser and the user’s device. From the IP address we were able to obtain a user’s geographical location and finally, we
                  logged in the time when it occurred. These loggers were placed in the constructors of various routes which were likely to be accessed
                  the most and when hit, the event logger posted data to the events table. </br></br>
                  All the extensive data we collected combined with the various tables in our database to find out all the statistics that would be important
                  from a developer’s point of view. </br></br>
                  The platform stats page shows :

                  <ul>
                    <li>Main Counts
                      <ul>
                        <li>Total Votes</li>
                        <li>Total Polls</li>
                        <li>Total Events</li>
                        <li>Total IPs</li>
                      </ul>
                    </li>
                    <li>Device Data
                      <ul>
                        <li>Browser data</li>
                        <li>OS data</li>
                      </ul>
                    </li>
                    <li>Endpoint Data</li>
                    <li>Poll Attributes Data
                      <ul>
                        <li>Feed Privacy</li>
                        <li>Number of Options</li>
                        <li>Analytics Privacy</li>
                        <li>Expiration Time data</li>
                      </ul>
                    </li>
                    <li>Returning users v/s One-time users</li>
                    <li>Timelines
                      <ul>
                        <li>Polls created v/s Day</li>
                        <li>Events created v/s Day</li>
                        <li>Votes v/s Day</li>
                      </ul>
                    </li>
                    <li>Tag Data</li>
                    <li>Location Data</li>
                  </ul>

                  <img class="screenshot img-responsive" src="../img/project/ballot/stats.gif" width="900px">
                </p>
                <div class="divider"></div>
                <p class="section-title">Challenges</p>
                <p class="artile">
                  We faced a lot of challenges during the course of this project. Initially, most of the challenges were because no one in the team had worked with
                  React before and understanding it and getting it to do what we wanted was hard. Also deploying our app to cPanel was annoying because its
                  interface is archaic so we moved to Heroku instead. Another problem we faced was with deploying our react app with node backend using the
                  express framework. Our server was running on port 5000 and react ran on port 3000. Getting both the ports to communicate required adding a
                  proxy to the React which took some time to figure out. </br></br>
                  After our template app was successfully deployed the form was the next challenge. We wanted the UI to be as seamless as possible while
                  supporting thorough input validation so that our database doesn’t store corrupt data. These were mostly frontend based challenges that were
                  cleared by reading articles online. Another problem we had was with the MySQL npm package we used. It requires the input in a certain way - for
                  eg., table names need to be enveloped by apostrophes (‘poll’). If a user Added an apostrophe in their question or options, MySQL would throw a
                  syntax error. To account for this we used RegEx to replace every apostrophe in the input with "§" and then replace it back again before displaying
                  it on the frontend.</br></br>
                  Figuring out all the aspects of a unique vote without having to log in was challenging and we needed to do a lot of research on how browser APIs
                  worked to be able to detect incognito mode and also how tech companies like Netflix detect VPNs in order to follow suit for our application.
                  Logging through Facebook also caused significant grief. Since their data breach, they have only made oAuth accessible on SSL. We hosted our
                  app using a dyno in order to add Facebook login.</br></br>
                  Another challenge was to create an embed endpoint in order to be able to embed a ballot poll anywhere on any website. This occurred because &lt;i
                  frame&gt; basically embeds a webpage within another and for our case, we had a persistent login head from the Route.js page. It wouldn’t have
                  context on another page and the app would crash. To account for this I added a handler function which was passed to the embed component on
                  react and in the constructor I called the function which changed state in the parent. This allowed us to be able to embed polls within other
                  websites.</br></br>

                  <iframe style="overflow:hidden; display:block; margin: auto;"
                      width="320" height="380" align="middle"
                      src="https://www.theballot.app/embed/4ae458"
                      frameborder="0" scrolling="no">
                  </iframe>

                </p>
                <p class="section-title">Try it out</p>
                <p class="article">
                    <a class="anchor" target="_blank" href="https://www.theballot.app">Website</a></br>
                    <a class="anchor" target="_blank" href="https://github.com/yagrawl/ballot">Github</a></br>
                    <a class="anchor" target="_blank" href="https://youtu.be/UsVOjNbTrYs">Demo</a></br>
                </p>
                <div class="divider"></div>
                <p class="section-title">More Projects</p>
                <p class="project-index">
                    <a class="anchor" href="/project/runistics">Runistics</a>&nbsp;&nbsp;&middot;&nbsp;&nbsp;
                    <a class="anchor" href="/project/leapflix">Leapflix</a>&nbsp;&nbsp;&middot;&nbsp;&nbsp;
                    <a class="anchor" href="/project/broker">Broker</a>&nbsp;&nbsp;&middot;&nbsp;&nbsp;
                    <a class="anchor" href="/project/task">Task.</a>&nbsp;&nbsp;&middot;&nbsp;&nbsp;
                    <a class="anchor" href="/project/musify">Musify</a>&nbsp;&nbsp;&middot;&nbsp;&nbsp;
                    <a class="anchor" href="/project/moviebot">Moviebot</a>&nbsp;&nbsp;&middot;&nbsp;&nbsp;
                    <a class="anchor" href="/project/homograph">IDN Homograph Detector</a>&nbsp;&nbsp;&middot;&nbsp;&nbsp;
                    <a class="anchor" href="/project/encryptr">Encryptr</a>&nbsp;&nbsp;&middot;&nbsp;&nbsp;
                </p>
                <div class="bot"></div>
            </div>
                <footer class="footerX">
                    <hr>
                    <p>&copy; Yash Agrawal
                        <span class="social">
                            <a href="https://facebook.com/yagrawl"><i class="fa fa-2x fa-facebook" aria-hidden="true"></i></a>
                            <a href="https://github.com/yagrawl"><i class="fa fa-2x fa-github" aria-hidden="true"></i></a>
                            <a href="https://instagram.com/yagrawl"><i class="fa fa-2x fa-instagram" aria-hidden="true"></i></a>
                            <a href="https://medium.com/@yagrawl"><i class="fa fa-2x fa-medium" aria-hidden="true"></i></a>
                            <a href="https://linkedin.com/in/yagrawl"><i class="fa fa-2x fa-linkedin" aria-hidden="true"></i></a>
                        </span>
                    </p>
                </footer>

            <!--jQuery -->
            <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
            <script src="../js/script.js"></script>

            <!--Font Awesome -->
            <script src="https://use.fontawesome.com/8c86fcede2.js"></script>

            <!--JavaScript Bootstrap -->
            <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
        </div>
    </body>
</html>
